{"contents.html":{"name":"Contents"},"Classes/StubbedMethod.html#/s:11SwiftyMocky13StubbedMethodC7isValidSbvp":{"name":"isValid","abstract":"<p>[Internal] Returns whether there are still products to be used as stub return values</p>","parent_name":"StubbedMethod"},"Classes/StubbedMethod.html#/s:11SwiftyMocky13StubbedMethodC6policyAA14StubbingPolicyOvp":{"name":"policy","abstract":"<p>[Internal] Stubbing policy. By default uses parent mock policy</p>","parent_name":"StubbedMethod"},"Classes/StubbedMethod.html#/s:11SwiftyMocky13StubbedMethodCyACSayAA11StubProductOGcfc":{"name":"init(_:)","abstract":"<p>[Internal] Creates new method init with given products.</p>","parent_name":"StubbedMethod"},"Classes/StubbedMethod.html#/s:11SwiftyMocky13StubbedMethodC10getProduct6policyAA04StubF0OAA14StubbingPolicyO_tF":{"name":"getProduct(policy:)","abstract":"<p>[Internal] Get next product, with respect to self.policy and inherited policy</p>","parent_name":"StubbedMethod"},"Classes/StubbedMethod.html#/s:11SwiftyMocky13StubbedMethodC4stub3forAA7StubberVyxGxm_tlF":{"name":"stub(for:)","abstract":"<p>[Internal] New instance of stubber class, used to populate products array</p>","parent_name":"StubbedMethod"},"Classes/StubbedMethod.html#/s:11SwiftyMocky13StubbedMethodC10stubThrows3forAA07StubberF0VyxGxm_tlF":{"name":"stubThrows(for:)","abstract":"<p>[Internal] New instance of stubber class, used to populate products array</p>","parent_name":"StubbedMethod"},"Enums/StubProduct.html#/s:11SwiftyMocky11StubProductO6returnyACypcACmF":{"name":"return(_:)","abstract":"<p>Undocumented</p>","parent_name":"StubProduct"},"Enums/StubProduct.html#/s:11SwiftyMocky11StubProductO5throwyACs5Error_pcACmF":{"name":"throw(_:)","abstract":"<p>Undocumented</p>","parent_name":"StubProduct"},"Enums/StubProduct.html#/s:11SwiftyMocky11StubProductO6castedxyKlF":{"name":"casted()","abstract":"<p>[Internal] If self is returns, and nested value can be casted to T, returns value. Can fail (fatalError)</p>","parent_name":"StubProduct"},"Enums/MockError.html#/s:11SwiftyMocky9MockErrorO9notStubedyA2CmF":{"name":"notStubed","abstract":"<p>Undocumented</p>","parent_name":"MockError"},"Extensions/UInt.html#/s:Su11SwiftyMockyE7matchesySbSiF":{"name":"matches(_:)","abstract":"<p>Returns whether given count matches countable case.</p>","parent_name":"UInt"},"Extensions/Optional.html#/s:Sq11SwiftyMockyE6orFailyxSSF":{"name":"orFail(_:)","abstract":"<p>Returns unwrapped value, or fails.</p>","parent_name":"Optional"},"Extensions/Optional.html#/s:s26ExpressibleByStringLiteralP0cD4TypeQa":{"name":"StringLiteralType","parent_name":"Optional"},"Extensions/Optional.html#/s:s43ExpressibleByExtendedGraphemeClusterLiteralP0cdeF4TypeQa":{"name":"ExtendedGraphemeClusterLiteralType","parent_name":"Optional"},"Extensions/Optional.html#/s:s33ExpressibleByUnicodeScalarLiteralP0cdE4TypeQa":{"name":"UnicodeScalarLiteralType","parent_name":"Optional"},"Extensions/Optional.html#/s:s26ExpressibleByStringLiteralP06stringD0x0cD4TypeQz_tcfc":{"name":"init(stringLiteral:)","parent_name":"Optional"},"Extensions/Optional.html#/s:s43ExpressibleByExtendedGraphemeClusterLiteralP08extendeddeF0x0cdeF4TypeQz_tcfc":{"name":"init(extendedGraphemeClusterLiteral:)","parent_name":"Optional"},"Extensions/Optional.html#/s:s33ExpressibleByUnicodeScalarLiteralP07unicodedE0x0cdE4TypeQz_tcfc":{"name":"init(unicodeScalarLiteral:)","parent_name":"Optional"},"Extensions/Optional.html#/s:s27ExpressibleByIntegerLiteralP0cD4TypeQa":{"name":"IntegerLiteralType","parent_name":"Optional"},"Extensions/Optional.html#/s:s27ExpressibleByIntegerLiteralP07integerD0x0cD4TypeQz_tcfc":{"name":"init(integerLiteral:)","parent_name":"Optional"},"Extensions/Optional.html#/s:s27ExpressibleByBooleanLiteralP0cD4TypeQa":{"name":"BooleanLiteralType","parent_name":"Optional"},"Extensions/Optional.html#/s:s27ExpressibleByBooleanLiteralP07booleanD0x0cD4TypeQz_tcfc":{"name":"init(booleanLiteral:)","parent_name":"Optional"},"Extensions/Optional.html#/s:s25ExpressibleByFloatLiteralP0cD4TypeQa":{"name":"FloatLiteralType","parent_name":"Optional"},"Extensions/Optional.html#/s:s25ExpressibleByFloatLiteralP05floatD0x0cD4TypeQz_tcfc":{"name":"init(floatLiteral:)","parent_name":"Optional"},"Extensions/Optional.html#/s:s25ExpressibleByArrayLiteralP0cD7ElementQa":{"name":"ArrayLiteralElement","parent_name":"Optional"},"Extensions/Optional.html#/s:s25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc":{"name":"init(arrayLiteral:)","parent_name":"Optional"},"Extensions/Optional.html#/s:s30ExpressibleByDictionaryLiteralP3KeyQa":{"name":"Key","parent_name":"Optional"},"Extensions/Optional.html#/s:s30ExpressibleByDictionaryLiteralP5ValueQa":{"name":"Value","parent_name":"Optional"},"Extensions/Optional.html#/s:s30ExpressibleByDictionaryLiteralP010dictionaryD0x3KeyQz_5ValueQztd_tcfc":{"name":"init(dictionaryLiteral:)","parent_name":"Optional"},"Extensions/Optional.html#/s:Sq11SwiftyMockyE8isNotNilSbvp":{"name":"isNotNil","abstract":"<p>Undocumented</p>","parent_name":"Optional"},"Extensions/Int.html#/s:Si11SwiftyMockyE7matchesySbSiF":{"name":"matches(_:)","abstract":"<p>Returns whether given count matches countable case.</p>","parent_name":"Int"},"Protocols/WithStubbingPolicy.html#/s:11SwiftyMocky18WithStubbingPolicyP6policyAA0dE0Ovp":{"name":"policy","abstract":"<p>Stubbing policy</p>","parent_name":"WithStubbingPolicy"},"Protocols/WithStubbingPolicy.html#/s:11SwiftyMocky18WithStubbingPolicyP4withyxAA0dE0OF":{"name":"with(_:)","abstract":"<p>[Internal] with new policy</p>","parent_name":"WithStubbingPolicy"},"Protocols/WithStaticSequencingPolicy.html#/s:11SwiftyMocky26WithStaticSequencingPolicyP010sequencingF0AA0eF0OvpZ":{"name":"sequencingPolicy","abstract":"<p>Used sequencibg policy</p>","parent_name":"WithStaticSequencingPolicy"},"Protocols/WithSequencingPolicy.html#/s:11SwiftyMocky20WithSequencingPolicyP010sequencingE0AA0dE0Ovp":{"name":"sequencingPolicy","abstract":"<p>Used sequencibg policy</p>","parent_name":"WithSequencingPolicy"},"Protocols/OptionalType.html#/s:11SwiftyMocky12OptionalTypeP8isNotNilSbvp":{"name":"isNotNil","abstract":"<p>Undocumented</p>","parent_name":"OptionalType"},"Structs/FatalErrorUtil.html#/s:11SwiftyMocky14FatalErrorUtilV3setyys5NeverOSScFZ":{"name":"set(_:)","abstract":"<p>[Internal] Override handling error handler</p>","parent_name":"FatalErrorUtil"},"Structs/FatalErrorUtil.html#/s:11SwiftyMocky14FatalErrorUtilV7restoreyyFZ":{"name":"restore()","abstract":"<p>[Internal] Restores default handler</p>","parent_name":"FatalErrorUtil"},"Structs/FatalErrorUtil.html#/s:11SwiftyMocky14FatalErrorUtilV05fatalD0ys5NeverOSSFZ":{"name":"fatalError(_:)","abstract":"<p>[Internal] Perform fatal error handler</p>","parent_name":"FatalErrorUtil"},"Classes/SwiftyMockyTestObserver.html#/setup()":{"name":"setup()","abstract":"<p>[Internal] No setup whatsoever</p>","parent_name":"SwiftyMockyTestObserver"},"Classes/SwiftyMockyTestObserver.html#/s:11SwiftyMocky0aB12TestObserverC5setupyyFZ":{"name":"setup()","abstract":"<p>Call this method to setup custom error handling for SwiftyMocky, that allows to gracefully handle missing stub fatal errors.","parent_name":"SwiftyMockyTestObserver"},"Classes/SwiftyMockyTestObserver.html#/c:@M@SwiftyMocky@objc(cs)SwiftyMockyTestObserver(im)testCaseWillStart:":{"name":"testCaseWillStart(_:)","abstract":"<p>[Internal] Observer for test start</p>","parent_name":"SwiftyMockyTestObserver"},"Classes/SwiftyMockyTestObserver.html#/c:@M@SwiftyMocky@objc(cs)SwiftyMockyTestObserver(im)testCaseDidFinish:":{"name":"testCaseDidFinish(_:)","abstract":"<p>[Internal] Observer for test finished</p>","parent_name":"SwiftyMockyTestObserver"},"Classes/SwiftyMockyTestObserver.html#/s:11SwiftyMocky0aB12TestObserverC22handleMissingStubError7message4file4lineySS_s12StaticStringVSutFZ":{"name":"handleMissingStubError(message:file:line:)","abstract":"<p>[Internal] used to notify that stub return value was not found. Do not call it directly.</p>","parent_name":"SwiftyMockyTestObserver"},"Classes/SwiftyMockyTestObserver.html":{"name":"SwiftyMockyTestObserver","abstract":"<p>Used for observing tests and handling internal library errors.</p>"},"Structs/FatalErrorUtil.html":{"name":"FatalErrorUtil","abstract":"<p>[Internal] Used for handling fatal errors inside library.</p>"},"Protocols/OptionalType.html":{"name":"OptionalType","abstract":"<p>Undocumented</p>"},"Protocols/WithSequencingPolicy.html":{"name":"WithSequencingPolicy","abstract":"<p>Has sequencing policy for stubbing methods</p>"},"Protocols/WithStaticSequencingPolicy.html":{"name":"WithStaticSequencingPolicy","abstract":"<p>Has sequencing policy for stubbing static methods</p>"},"Protocols/WithStubbingPolicy.html":{"name":"WithStubbingPolicy","abstract":"<p>[Internal] used for marking that stubs have configurable policy</p>"},"Extensions/Int.html":{"name":"Int"},"Extensions/Optional.html":{"name":"Optional"},"Extensions/UInt.html":{"name":"UInt"},"Enums/MockError.html":{"name":"MockError","abstract":"<p>[Internal] Generic Mock library errors</p>"},"Enums/StubProduct.html":{"name":"StubProduct","abstract":"<p>[Internal] Possible Given products. Method can either return or throw an error (in general)</p>"},"Classes/StubbedMethod.html":{"name":"StubbedMethod","abstract":"<p>[Internal] Allows to reduce Mock.generated.swif size, by moving part of implementation here.</p>"},"Internal.html#/s:11SwiftyMocky7Failureys5NeverOSSF":{"name":"Failure(_:)","abstract":"<p>[Internal] Fails flow with given message</p>"},"Internal.html#/s:11SwiftyMocky0B6Assert__4file4lineySbyXK_SSyXKs12StaticStringVSutF":{"name":"MockyAssert(_:_:file:line:)","abstract":"<p>[internal] Assertion used by mocks and Verify methods</p>"},"Internal.html#/MockyAssert(_:_:file:line:)":{"name":"MockyAssert(_:_:file:line:)","abstract":"<p>[internal] Assertion used by mocks and Verify methods</p>"},"Deprecated.html#/s:11SwiftyMocky14VerifyProperty__4file4lineyx_0C0Qzs12StaticStringVSutAA4MockRzlF":{"name":"VerifyProperty(_:_:file:line:)","abstract":"<p>Verify that given property getter or setter was called on mock object <strong>at least once</strong>.</p>"},"Deprecated.html#/s:11SwiftyMocky14VerifyProperty__4file4lineyxm_06StaticC0Qzs0G6StringVSutAA0G4MockRzlF":{"name":"VerifyProperty(_:_:file:line:)","abstract":"<p>Verify that given static property getter or setter was called on mock object <strong>at least once</strong>.</p>"},"Deprecated.html#/s:11SwiftyMocky14VerifyProperty___4file4lineyx_AA5CountO0C0Qzs12StaticStringVSutAA4MockRzlF":{"name":"VerifyProperty(_:_:_:file:line:)","abstract":"<p>Verify that given property get / set was called on mock object <strong>exact number of times</strong>.</p>"},"Deprecated.html#/s:11SwiftyMocky14VerifyProperty___4file4lineyxm_AA5CountO06StaticC0Qzs0H6StringVSutAA0H4MockRzlF":{"name":"VerifyProperty(_:_:_:file:line:)","abstract":"<p>Verify that given static property get / set was called on mock type <strong>exact number of times</strong>.</p>"},"Classes/MockyAssertion.html#/handler":{"name":"handler","abstract":"<p>[Prototyping] You can use it to define assertion behaviour.","parent_name":"MockyAssertion"},"Helpers.html#/s:11SwiftyMocky20XCTAssertThrowsError_2of_4file4lineyxyKXK_q_mSSyXKs12StaticStringVSuts0E0R_r0_lF":{"name":"XCTAssertThrowsError(_:of:_:file:line:)","abstract":"<p>Allows to verify if error was thrown, and if it is of given type.</p>"},"Helpers.html#/s:11SwiftyMocky20XCTAssertThrowsError_5error_4file4lineyxyKXK_q_SSyXKs12StaticStringVSutSQR_s0E0R_r0_lF":{"name":"XCTAssertThrowsError(_:error:_:file:line:)","abstract":"<p>Allows to verify if error was throws, and if its exactly the one expected.</p>"},"Classes/MockyAssertion.html":{"name":"MockyAssertion","abstract":"<p>[Prototyping] You can use this class if there is need to define custom"},"Protocols/GenericAttributeType.html#/s:11SwiftyMocky20GenericAttributeTypeP5valueypvp":{"name":"value","abstract":"<p>[internal] Returned value</p>","parent_name":"GenericAttributeType"},"Protocols/GenericAttributeType.html#/s:11SwiftyMocky20GenericAttributeTypeP8intValueSivp":{"name":"intValue","abstract":"<p>[internal] Used to describe attribute generocity (0 is general, 1 is specific)</p>","parent_name":"GenericAttributeType"},"Protocols/GenericAttributeType.html#/s:11SwiftyMocky20GenericAttributeTypeP7compareySbyp_ypAA7MatcherCtcvp":{"name":"compare","abstract":"<p>[internal] Used to compare with other generic attributes values</p>","parent_name":"GenericAttributeType"},"Structs/GenericAttribute.html#/s:11SwiftyMocky16GenericAttributeV5valueypvp":{"name":"value","abstract":"<p>[internal]Returned value</p>","parent_name":"GenericAttribute"},"Structs/GenericAttribute.html#/s:11SwiftyMocky16GenericAttributeV8intValueSivp":{"name":"intValue","abstract":"<p>[internal] Used to describe attribute generocity (0 is general, 1 is specific)</p>","parent_name":"GenericAttribute"},"Structs/GenericAttribute.html#/s:11SwiftyMocky16GenericAttributeV7compareySbyp_ypAA7MatcherCtcvp":{"name":"compare","abstract":"<p>[internal] Used to compare with other generic attributes</p>","parent_name":"GenericAttribute"},"Structs/GenericAttribute.html#/s:11SwiftyMocky16GenericAttributeVyACyp_SiSbyp_ypAA7MatcherCtctcfc":{"name":"init(_:_:_:)","abstract":"<p>[internal] Creates new GenericAttribute instance, with specified return value and compare closure</p>","parent_name":"GenericAttribute"},"Structs/GenericAttribute.html":{"name":"GenericAttribute","abstract":"<p>[Internal] Used to wrap generic parameters, for sake of generic method stubs.</p>"},"Protocols/GenericAttributeType.html":{"name":"GenericAttributeType","abstract":"<p>[Internal] Used as generic constraint for generic method stubs.</p>"},"Structs/StubberThrows.html#/s:11SwiftyMocky13StubberThrowsV6policyAA14StubbingPolicyOvp":{"name":"policy","abstract":"<p>Stubbing policy. If wrap - it will iterate over recorded values. If drop - it will remove value when stub returns. If default - it will use mock settings</p>","parent_name":"StubberThrows"},"Structs/StubberThrows.html#/s:11SwiftyMocky13StubberThrowsV_9returningACyxGAA13StubbedMethodC_xmtcfc":{"name":"init(_:returning:)","abstract":"<p>[Internal] New instance of stubber class, used to populate products array</p>","parent_name":"StubberThrows"},"Structs/StubberThrows.html#/s:11SwiftyMocky13StubberThrowsV6returnyyxF":{"name":"return(_:)","abstract":"<p>Record return value</p>","parent_name":"StubberThrows"},"Structs/StubberThrows.html#/s:11SwiftyMocky13StubberThrowsV6returnyyxd_tF":{"name":"return(_:)","abstract":"<p>Record subsequent return values, in given order (comma separated)</p>","parent_name":"StubberThrows"},"Structs/StubberThrows.html#/s:11SwiftyMocky13StubberThrowsV5throwyys5Error_pF":{"name":"throw(_:)","abstract":"<p>Record thrown error</p>","parent_name":"StubberThrows"},"Structs/StubberThrows.html#/s:11SwiftyMocky13StubberThrowsV5throwyys5Error_pd_tF":{"name":"throw(_:)","abstract":"<p>Record subsequent thrown errors, in given order (comma separated)</p>","parent_name":"StubberThrows"},"Structs/Stubber.html#/s:11SwiftyMocky7StubberV6policyAA14StubbingPolicyOvp":{"name":"policy","abstract":"<p>Stubbing policy. If wrap - it will iterate over recorded values. If drop - it will remove value when stub returns. If default - it will use mock settings</p>","parent_name":"Stubber"},"Structs/Stubber.html#/s:11SwiftyMocky7StubberV_9returningACyxGAA13StubbedMethodC_xmtcfc":{"name":"init(_:returning:)","abstract":"<p>[Internal] New instance of stubber class, used to populate products array</p>","parent_name":"Stubber"},"Structs/Stubber.html#/s:11SwiftyMocky7StubberV6returnyyxF":{"name":"return(_:)","abstract":"<p>Record return value</p>","parent_name":"Stubber"},"Structs/Stubber.html#/s:11SwiftyMocky7StubberV6returnyyxd_tF":{"name":"return(_:)","abstract":"<p>Record subsequent return values, in given order (comma separated)</p>","parent_name":"Stubber"},"Enums/Count.html#/s:11SwiftyMocky5CountO21CustomMatchingClosurea":{"name":"CustomMatchingClosure","abstract":"<p>Count matching closure</p>","parent_name":"Count"},"Enums/Count.html#/s:11SwiftyMocky5CountO18IntegerLiteralTypea":{"name":"IntegerLiteralType","abstract":"<p>[Internal] Count is represented by integer literals, with type Int</p>","parent_name":"Count"},"Enums/Count.html#/s:11SwiftyMocky5CountO11atLeastOnceyA2CmF":{"name":"atLeastOnce","abstract":"<p>Called at least once</p>","parent_name":"Count"},"Enums/Count.html#/s:11SwiftyMocky5CountO4onceyA2CmF":{"name":"once","abstract":"<p>Called exactly once</p>","parent_name":"Count"},"Enums/Count.html#/s:11SwiftyMocky5CountO6customyACSbSiccACmF":{"name":"custom(_:)","abstract":"<p>Custom count resolving closure</p>","parent_name":"Count"},"Enums/Count.html#/s:11SwiftyMocky5CountO7exactlyyACSicACmF":{"name":"exactly(_:)","abstract":"<p>Called exactly n times</p>","parent_name":"Count"},"Enums/Count.html#/s:11SwiftyMocky5CountO4fromyACSi_SitcACmF":{"name":"from(_:to:)","abstract":"<p>Called in a&hellip;b range</p>","parent_name":"Count"},"Enums/Count.html#/s:11SwiftyMocky5CountO4lessyACSi_tcACmF":{"name":"less(than:)","abstract":"<p>Called less than n times</p>","parent_name":"Count"},"Enums/Count.html#/s:11SwiftyMocky5CountO11lessOrEqualyACSi_tcACmF":{"name":"lessOrEqual(to:)","abstract":"<p>Called less than ot equal to n times</p>","parent_name":"Count"},"Enums/Count.html#/s:11SwiftyMocky5CountO4moreyACSi_tcACmF":{"name":"more(than:)","abstract":"<p>Called more than n times</p>","parent_name":"Count"},"Enums/Count.html#/s:11SwiftyMocky5CountO11moreOrEqualyACSi_tcACmF":{"name":"moreOrEqual(to:)","abstract":"<p>Called more than ot equal to n times</p>","parent_name":"Count"},"Enums/Count.html#/s:11SwiftyMocky5CountO5neveryA2CmF":{"name":"never","abstract":"<p>Never called</p>","parent_name":"Count"},"Enums/Count.html#/s:11SwiftyMocky5CountO14integerLiteralACSi_tcfc":{"name":"init(integerLiteral:)","abstract":"<p>Creates new count instance, matching specific count</p>","parent_name":"Count"},"Enums/Count.html#/s:11SwiftyMocky5CountO11descriptionSSvp":{"name":"description","abstract":"<p>Human readable description</p>","parent_name":"Count"},"Enums/Count.html#/s:11SwiftyMocky5CountO7matchesySbSiF":{"name":"matches(_:)","abstract":"<p>Returns whether given count matches countable case.</p>","parent_name":"Count"},"Protocols/Countable.html#/s:11SwiftyMocky9CountableP7matchesySbSiF":{"name":"matches(_:)","abstract":"<p>Returns whether given count matches countable case.</p>","parent_name":"Countable"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC7defaultACvpZ":{"name":"default","abstract":"<p>Shared <strong>Matcher</strong> instance</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherCACycfc":{"name":"init()","abstract":"<p>Create new clean matcher instance.</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC7matcherA2C_tcfc":{"name":"init(matcher:)","abstract":"<p>Creante new matcher instance, copying existing comparator from another instance.</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC8register_5matchyxm_Sbx_xtctlF":{"name":"register(_:match:)","abstract":"<p>Registers comparator for given type <strong>T</strong>.</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC8registeryyxmmlF":{"name":"register(_:)","abstract":"<p>Registers comparator for type, like comparing Int.self to Int.self. These types of comparators always returns true. Register like: <code>Matcher.default.register(CustomType.Type.self)</code></p>","parent_name":"Matcher"},"Classes/Matcher.html#/register(_:match:)":{"name":"register(_:match:)","abstract":"<p>Register sequence comparator, based on elements comparing.</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC8registeryyxmSQRzlF":{"name":"register(_:)","abstract":"<p>Register default comparatot for Equatable types. Required for generic mocks to work.</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC10comparator3forSbx_xtcSgxm_tlF":{"name":"comparator(for:)","abstract":"<p>Returns comparator closure for given type (if any).</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC10comparator3forSbx_xtcSgxm_tSTRzlF":{"name":"comparator(for:)","abstract":"<p>Default Sequence comparator, compares count, and then element by element.</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC10comparator3forSbx_xtcSgxm_tSQRzlF":{"name":"comparator(for:)","abstract":"<p>Default Equatable comparator, compares if elements are equal.</p>","parent_name":"Matcher"},"Classes/Matcher.html#/s:11SwiftyMocky7MatcherC10comparator3forSbx_xtcSgxm_tSQRzSTRzlF":{"name":"comparator(for:)","abstract":"<p>Default Equatable Sequence comparator, compares count, and then for every element equal element.</p>","parent_name":"Matcher"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO1_yACyxGAEmlF":{"name":"_","abstract":"<p>Wildcard - any value</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO5valueyACyxGxcAEmlF":{"name":"value(_:)","abstract":"<p>Explicit value</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO8matchingyACyxGSbxccAEmlF":{"name":"matching(_:)","abstract":"<p>Any value matching</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO3anyACyxGvpZ":{"name":"any","abstract":"<p>Represents and matches any parameter value - syntactic sugar for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/Parameter.html#/s:11SwiftyMocky9ParameterO1_yACyxGAEmlF\">._</a></code> case.</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO3anyyACyqd__Gqd__mlFZ":{"name":"any(_:)","abstract":"<p>Represents and matches any parameter value - syntactic sugar for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/Parameter.html#/s:11SwiftyMocky9ParameterO1_yACyxGAEmlF\">._</a></code> case. Used, when needs to explicitely specify","parent_name":"Parameter"},"Enums/Parameter.html#/s:s26ExpressibleByStringLiteralP0cD4TypeQa":{"name":"StringLiteralType","parent_name":"Parameter"},"Enums/Parameter.html#/s:s43ExpressibleByExtendedGraphemeClusterLiteralP0cdeF4TypeQa":{"name":"ExtendedGraphemeClusterLiteralType","parent_name":"Parameter"},"Enums/Parameter.html#/s:s33ExpressibleByUnicodeScalarLiteralP0cdE4TypeQa":{"name":"UnicodeScalarLiteralType","parent_name":"Parameter"},"Enums/Parameter.html#/s:s26ExpressibleByStringLiteralP06stringD0x0cD4TypeQz_tcfc":{"name":"init(stringLiteral:)","parent_name":"Parameter"},"Enums/Parameter.html#/s:s43ExpressibleByExtendedGraphemeClusterLiteralP08extendeddeF0x0cdeF4TypeQz_tcfc":{"name":"init(extendedGraphemeClusterLiteral:)","parent_name":"Parameter"},"Enums/Parameter.html#/s:s33ExpressibleByUnicodeScalarLiteralP07unicodedE0x0cdE4TypeQz_tcfc":{"name":"init(unicodeScalarLiteral:)","parent_name":"Parameter"},"Enums/Parameter.html#/s:s23ExpressibleByNilLiteralP03nilD0xyt_tcfc":{"name":"init(nilLiteral:)","parent_name":"Parameter"},"Enums/Parameter.html#/s:s27ExpressibleByIntegerLiteralP0cD4TypeQa":{"name":"IntegerLiteralType","parent_name":"Parameter"},"Enums/Parameter.html#/s:s27ExpressibleByIntegerLiteralP07integerD0x0cD4TypeQz_tcfc":{"name":"init(integerLiteral:)","parent_name":"Parameter"},"Enums/Parameter.html#/s:s27ExpressibleByBooleanLiteralP0cD4TypeQa":{"name":"BooleanLiteralType","parent_name":"Parameter"},"Enums/Parameter.html#/s:s27ExpressibleByBooleanLiteralP07booleanD0x0cD4TypeQz_tcfc":{"name":"init(booleanLiteral:)","parent_name":"Parameter"},"Enums/Parameter.html#/s:s25ExpressibleByFloatLiteralP0cD4TypeQa":{"name":"FloatLiteralType","parent_name":"Parameter"},"Enums/Parameter.html#/s:s25ExpressibleByFloatLiteralP05floatD0x0cD4TypeQz_tcfc":{"name":"init(floatLiteral:)","parent_name":"Parameter"},"Enums/Parameter.html#/s:s25ExpressibleByArrayLiteralP0cD7ElementQa":{"name":"ArrayLiteralElement","parent_name":"Parameter"},"Enums/Parameter.html#/s:s25ExpressibleByArrayLiteralP05arrayD0x0cD7ElementQzd_tcfc":{"name":"init(arrayLiteral:)","parent_name":"Parameter"},"Enums/Parameter.html#/s:s30ExpressibleByDictionaryLiteralP3KeyQa":{"name":"Key","parent_name":"Parameter"},"Enums/Parameter.html#/s:s30ExpressibleByDictionaryLiteralP5ValueQa":{"name":"Value","parent_name":"Parameter"},"Enums/Parameter.html#/s:s30ExpressibleByDictionaryLiteralP010dictionaryD0x3KeyQz_5ValueQztd_tcfc":{"name":"init(dictionaryLiteral:)","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOA2A12OptionalTypeRzlE6notNilACyxGvpZ":{"name":"notNil","abstract":"<p>Undocumented</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOA2A20GenericAttributeTypeRzlE8intValueSivp":{"name":"intValue","abstract":"<p>Used for invocations sorting purpose.</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO8intValueSivp":{"name":"intValue","abstract":"<p>Used for invocations sorting purpose.</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO7compare3lhs3rhs4withSbACyxG_AhA7MatcherCtFZ":{"name":"compare(lhs:rhs:with:)","abstract":"<p>Returns whether given two parameters are matching each other, with following rules:</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterO13wrapAsGenericACyAA0F9AttributeVGyF":{"name":"wrapAsGeneric()","abstract":"<p>[Internal] Wraps as generic Parameter instance. Should not be ever called directly.</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOA2A20GenericAttributeTypeRzlE7compare3lhs3rhs4withSbACyxG_AiA7MatcherCtFZ":{"name":"compare(lhs:rhs:with:)","abstract":"<p>[Internal] Compare two parameters</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOAASQRzSTRzlE7compare3lhs3rhs4withSbACyxG_AhA7MatcherCtFZ":{"name":"compare(lhs:rhs:with:)","abstract":"<p>[Internal] Compare two parameters</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOAASTRzSQ7ElementRpzlE7compare3lhs3rhs4withSbACyxG_AjA7MatcherCtFZ":{"name":"compare(lhs:rhs:with:)","abstract":"<p>[Internal] Compare two parameters</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOAASQRzSTRzSQ7ElementSTRpzlE7compare3lhs3rhs4withSbACyxG_AjA7MatcherCtFZ":{"name":"compare(lhs:rhs:with:)","abstract":"<p>[Internal] Compare two parameters</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOAASTRzlE7Elementa":{"name":"Element","abstract":"<p>Element</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOAASTRzlE7compare3lhs3rhs4withSbACyxG_AhA7MatcherCtFZ":{"name":"compare(lhs:rhs:with:)","abstract":"<p>[Internal] Compare two parameters</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOAASTRzlE13wrapAsGenericACyAA0F9AttributeVGyF":{"name":"wrapAsGeneric()","abstract":"<p>[Internal] Wraps as generic Parameter instance. Should not be ever called directly.</p>","parent_name":"Parameter"},"Enums/Parameter.html#/s:11SwiftyMocky9ParameterOAASQRzlE7compare3lhs3rhs4withSbACyxG_AhA7MatcherCtFZ":{"name":"compare(lhs:rhs:with:)","abstract":"<p>[Internal] Compare two parameters</p>","parent_name":"Parameter"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP0C5GivenQa":{"name":"StaticGiven","abstract":"<p>Stubbed method and property type</p>","parent_name":"StaticMock"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP0C6VerifyQa":{"name":"StaticVerify","abstract":"<p>Verification type</p>","parent_name":"StaticMock"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP0C7PerformQa":{"name":"StaticPerform","abstract":"<p>Perform type</p>","parent_name":"StaticMock"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP5clearyyFZ":{"name":"clear()","abstract":"<p>As verifying static members relies on static count of invocations, clear allows to &lsquo;reset&rsquo; static mock internals.</p>","parent_name":"StaticMock"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP5givenyy0C5GivenQzFZ":{"name":"given(_:)","abstract":"<p>Registers return value for stubbed method, for specified attributes set.</p>","parent_name":"StaticMock"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP7performyy0C7PerformQzFZ":{"name":"perform(_:)","abstract":"<p>Registers perform closure, which will be executed upon calling stubbed method, for specified attribtes.</p>","parent_name":"StaticMock"},"Protocols/StaticMock.html#/s:11SwiftyMocky10StaticMockP6verify_5count4file4liney0C6VerifyQz_AA5CountOs0C6StringVSutFZ":{"name":"verify(_:count:file:line:)","abstract":"<p>Verifies, that given method stub was called exact number of times.</p>","parent_name":"StaticMock"},"Protocols/Mock.html#/s:11SwiftyMocky4MockP5GivenQa":{"name":"Given","abstract":"<p>Stubbed method and property type</p>","parent_name":"Mock"},"Protocols/Mock.html#/s:11SwiftyMocky4MockP6VerifyQa":{"name":"Verify","abstract":"<p>Verification type</p>","parent_name":"Mock"},"Protocols/Mock.html#/s:11SwiftyMocky4MockP7PerformQa":{"name":"Perform","abstract":"<p>Perform type</p>","parent_name":"Mock"},"Protocols/Mock.html#/s:11SwiftyMocky4MockP5givenyy5GivenQzF":{"name":"given(_:)","abstract":"<p>Registers return value for stubbed method, for specified attributes set.</p>","parent_name":"Mock"},"Protocols/Mock.html#/s:11SwiftyMocky4MockP7performyy7PerformQzF":{"name":"perform(_:)","abstract":"<p>Registers perform closure, which will be executed upon calling stubbed method, for specified attribtes.</p>","parent_name":"Mock"},"Protocols/Mock.html#/s:11SwiftyMocky4MockP6verify_5count4file4liney6VerifyQz_AA5CountOs12StaticStringVSutF":{"name":"verify(_:count:file:line:)","abstract":"<p>Verifies, that given method stub was called exact number of times.</p>","parent_name":"Mock"},"Protocols/Mock.html":{"name":"Mock","abstract":"<p>Every generated mock implementation adopts <strong>Mock</strong> protocol."},"Protocols/StaticMock.html":{"name":"StaticMock","abstract":"<p>Every mock, that stubs static methods, should adopt <strong>StaticMock</strong> protocol."},"Enums/Parameter.html":{"name":"Parameter","abstract":"<p>Parameter wraps method attribute, allowing to make a difference between explicit value,"},"Classes/Matcher.html":{"name":"Matcher","abstract":"<p>Matcher is container class, responsible for storing and resolving comparators for given types.</p>"},"Protocols/Countable.html":{"name":"Countable","abstract":"<p>Allows matching count, verifying whether given count is right or not</p>"},"Enums/Count.html":{"name":"Count","abstract":"<p>Count enum. Use it for all Verify features, when checking how many times something happened.</p>"},"Structs/Stubber.html":{"name":"Stubber","abstract":"<p>Used to populate stubbed method with sequence of events. Call it&rsquo;s methods, to record subsequent stub return values.</p>"},"Structs/StubberThrows.html":{"name":"StubberThrows","abstract":"<p>Used to populate stubbed method with sequence of events. Call it&rsquo;s methods, to record subsequent stub return/throw values.</p>"},"Enums/SequencingPolicy.html#/s:11SwiftyMocky16SequencingPolicyO24lastWrittenResolvedFirstyA2CmF":{"name":"lastWrittenResolvedFirst","abstract":"<p>Default policy. Last given overrides previous, if they are both with same generocity level</p>","parent_name":"SequencingPolicy"},"Enums/SequencingPolicy.html#/s:11SwiftyMocky16SequencingPolicyO14inWritingOrderyA2CmF":{"name":"inWritingOrder","abstract":"<p>Givens would be recalled in order of generocity, respecting writing order (first line resolved first)</p>","parent_name":"SequencingPolicy"},"Enums/SequencingPolicy.html#/s:11SwiftyMocky16SequencingPolicyO6sorted_2bySayxGAF_Sbx_xtXEtlF":{"name":"sorted(_:by:)","abstract":"<p>[Internal] Sorts stub return values / errors throw with respect to ordering rule and policy</p>","parent_name":"SequencingPolicy"},"Enums/StubbingPolicy.html#/s:11SwiftyMocky14StubbingPolicyO7defaultyA2CmF":{"name":"default","abstract":"<p>Use current policy specified for Mock method type</p>","parent_name":"StubbingPolicy"},"Enums/StubbingPolicy.html#/s:11SwiftyMocky14StubbingPolicyO4wrapyA2CmF":{"name":"wrap","abstract":"<p>Default policy in general. When reaching end of sequence of events, index will rewind to beginning (looping)</p>","parent_name":"StubbingPolicy"},"Enums/StubbingPolicy.html#/s:11SwiftyMocky14StubbingPolicyO4dropyA2CmF":{"name":"drop","abstract":"<p>With this policy, every call drops event. When events count reaches zero, given is removed from mock.</p>","parent_name":"StubbingPolicy"},"Enums/StubbingPolicy.html#/s:11SwiftyMocky14StubbingPolicyO4realyA2CF":{"name":"real(_:)","abstract":"<p>[Internal] Resolves used policy. If self is default, will use inherited, otherwise self</p>","parent_name":"StubbingPolicy"},"Enums/StubbingPolicy.html#/s:11SwiftyMocky14StubbingPolicyO7updated_4withS2i_SitF":{"name":"updated(_:with:)","abstract":"<p>[Internal] Computes new index for stubs array. For wrap will rewind if out of bounds, for drop will not.","parent_name":"StubbingPolicy"},"Enums/StubbingPolicy.html":{"name":"StubbingPolicy","abstract":"<p>Given Policy for treating sequence of events (products). Used to determine if stub return values should be consumed"},"Enums/SequencingPolicy.html":{"name":"SequencingPolicy","abstract":"<p>Sequencing policy - in which order Given would be resolved. Pleas ehve in mind that this policy is applied ONLY after"},"Global methods.html#/s:11SwiftyMocky5Givenyyx_ABQzAA14StubbingPolicyOtAA4MockRzlF":{"name":"Given(_:_:_:)","abstract":"<p>Setup return value for method stubs in mock instance. When this method will be called on mock, it"},"Global methods.html#/s:11SwiftyMocky5Givenyyxm_06StaticC0QzAA14StubbingPolicyOtAA0D4MockRzlF":{"name":"Given(_:_:_:)","abstract":"<p>Setup return value for static method stubs on mock type. When this static method will be called, it"},"Global methods.html#/s:11SwiftyMocky7Performyyx_ABQztAA4MockRzlF":{"name":"Perform(_:_:)","abstract":"<p>Setup perform closure for method stubs in mock instance. When this method will be called on mock, it"},"Global methods.html#/s:11SwiftyMocky7Performyyxm_06StaticC0QztAA0D4MockRzlF":{"name":"Perform(_:_:)","abstract":"<p>Setup perform closure for static method stubs for mock type. When this method will be called on mock type, it"},"Global methods.html#/s:11SwiftyMocky6Verify__4file4lineyx_ABQzs12StaticStringVSutAA4MockRzlF":{"name":"Verify(_:_:file:line:)","abstract":"<p>Verify that given method was called on mock object <strong>at least once</strong>.</p>"},"Global methods.html#/s:11SwiftyMocky6Verify__4file4lineyxm_06StaticC0Qzs0F6StringVSutAA0F4MockRzlF":{"name":"Verify(_:_:file:line:)","abstract":"<p>Verify that given static method was called on mock type <strong>at least once</strong>.</p>"},"Global methods.html#/s:11SwiftyMocky6Verify___4file4lineyx_AA5CountOABQzs12StaticStringVSutAA4MockRzlF":{"name":"Verify(_:_:_:file:line:)","abstract":"<p>Verify that given method was called on mock object <strong>exact number of times</strong>.</p>"},"Global methods.html#/s:11SwiftyMocky6Verify___4file4lineyxm_AA5CountO06StaticC0Qzs0G6StringVSutAA0G4MockRzlF":{"name":"Verify(_:_:_:file:line:)","abstract":"<p>Verify that given static method was called on mock type <strong>exact number of times</strong>.</p>"},"matcher-support-for-not-equatable.html":{"name":"Matcher support for not Equatable"},"handling-generics.html":{"name":"Handling Generics"},"examples.html":{"name":"Examples"},"legacy.html":{"name":"Legacy"},"add-xcode-generate-action.html":{"name":"Add XCode generate action"},"known-issues.html":{"name":"Known issues"},"changelog.html":{"name":"CHANGELOG"},"overview.html":{"name":"Overview"},"installation.html":{"name":"Installation"},"setup-in-project.html":{"name":"Setup in project"},"mockfile.html":{"name":"Mockfile"},"command-line-interface.html":{"name":"Command Line Interface"},"supported-features.html":{"name":"Supported features"},"Main Guides.html":{"name":"Main Guides"},"Additional Guides.html":{"name":"Additional Guides"},"Global methods.html":{"name":"Global methods"},"Configuration.html":{"name":"Configuration"},"Types.html":{"name":"Types"},"Generics.html":{"name":"Generics"},"Helpers.html":{"name":"Helpers"},"Deprecated.html":{"name":"Deprecated"},"Internal.html":{"name":"Internal"},"Other Guides.html":{"name":"Other Guides","abstract":"<p>The following guides are available globally.</p>"}}